body {
    background-color: #FFF;
    margin: 0 auto;
  }
  
  header {
    background-color: #466995;
    border-bottom: 1px solid #466995;
    position: fixed;
    width: 100%;
    z-index: 10;
  }
  
  ul {
    margin: 30px auto;
    padding: 0 20px;
    text-align: center;
  }
  
  li {
    color: #FFF;
    font-family: 'Oswald', sans-serif;
    font-size: 16px;
    font-weight: 300;
    text-transform: uppercase;
    display: inline-block;
    width: 80px;  
  }
  
  li:hover {
    color: #DBE9EE;
  }
  
  h1 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 32px;
    font-weight: 300;
    text-transform: uppercase;
  }
  
  h2 {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 26px;
    font-weight: 100;
    margin: 0 auto 20px auto;
  }
  
  h3 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    text-align: center;
    font-weight: 700;
    text-transform: uppercase;
    padding: 30px;
  }
  
  h4 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    font-weight: 300;
    letter-spacing: 2px;
    text-align: center;
    text-transform: uppercase
  }
  
  p {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 18px;
  }
  
  footer {
    background-color: #DBE9EE;
    text-align: center;
    height: 100px;
  }
  
  .welcome {
    background-color: #DBE9EE;
    box-sizing: border-box;
    padding: 40px;
    text-align: center;
    width: 100%;
    position: relative;
    top: 50px;
  }
  
  .question {
    text-align: center;
    position: relative;
    top: 40px;
    clear: left;
  }
  
  .answer {
    border: 1px solid #466995;
    margin: 20px;
    display: inline-block;
  }
  
  .answer:hover {
    background: #C0D6DF;
    color: #FFF;
  }

/*
  

  LET'S PLAY WITH position PROPERTY

  static:
  - does nothing, it's the default one


  Now we declare it with other properties with this options:

  relative:
  - This value allows you to position an element relative to its default static position on the web page.
  > top - moves the element down from the top.
  > bottom - moves the element up from the bottom.
  > left - moves the element away from the left side (to the right).
  > right - moves the element away from the right side (to the left).

  absolute: 
  - Will make other elements ignore that css piece

  fixed: 
  - the element will scroll with the rest of the document when a user scrolls.
  > top - moves the element down from the top.
  > bottom - moves the element up from the bottom.
  > left - moves the element away from the left side (to the right).
  > right - moves the element away from the right side (to the left).

  sticky: 
  - The sticky value is another position value that keeps an element in the document flow as the user scrolls,
    but sticks to a specified position as the page is scrolled further.




    z-index:
    The z-index property controls how far back or how far forward an element
    should appear on the web page when elements overlap. 




    LET'S PLAY WITH display PROPERTY


    What can PROTPERTY be?

    block: 
    - will make it in it's own line

    inline-block: 
    The third value for the display property is inline-block. 
    Inline-block display combines features of both inline and block elements.
    Inline-block elements can appear next to each other and we can specify their dimensions using the width and height properties. Images are the best example of default inline-block elements.





    float:
    commonly used for wrapping text around an image while moving elements left and right for layout purposes 
    is better left to tools like CSS grid and flexbox,
    > left - moves, or floats, elements as far left as possible.
    > right - moves elements as far right as possible.



    The float property can also be used to float multiple elements at once. However, when multiple floated elements have different heights, it can affect their layout on the page. Specifically, elements can “bump” into each other and not allow other elements to properly move to the left or right.

    The clear property specifies how elements should behave when they bump into each other on the page. It can take on one of the following values:
  
    > left - the left side of the element will not touch any other element within the same containing element.
    > right - the right side of the element will not touch any other element within the same containing element.
    > both - neither side of the element will touch any other element within the same containing element.
    > none - the element can touch either side.
    
  */




  /* Everything from codecademy */